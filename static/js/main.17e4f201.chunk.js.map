{"version":3,"sources":["api/api.js","components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Body/body.js","App.js","serviceWorker.js","index.js"],"names":["dotenv","config","APIkey","concat","process","api","search","query","axios","get","Col","_ref","size","children","react_default","a","createElement","className","split","map","join","Container","fluid","Row","Body","state","results","searchMovie","then","res","console","log","_this","setState","data","Search","catch","err","alert","handleInputChange","event","value","target","handleFormSubmit","preventDefault","Navbar","Header","Brand","href","Glyphicon","glyph","Toggle","Collapse","Form","pullLeft","FormGroup","FormControl","type","placeholder","onChange","this","Button","onClick","movie","Container_Container","Row_Row","Col_Col","Title","Year","Type","alt","src","Poster","Component","App","Body_body","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17e4f201.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\n// Using ?s= instead of ?t= is limiting the data to title, year and type\r\nconst url = \"https://www.omdbapi.com/?s=\";\r\nconst url2 = \"&r=json&apikey=\"\r\nconst APIkey = `${process.env.REACT_APP_API_KEY}`;\r\n\r\n\r\nexport default {\r\n    search: function(query) {\r\n        return axios.get(url + query + url2 + APIkey);\r\n    }\r\n};\r\n\r\n\r\n","import React from \"react\";\n\nexport const Col = ({ size, children }) => (\n  <div className={size.split(\" \").map(size => \"col-\" + size).join(\" \")}>\n    {children}\n  </div>\n);\n","import React from \"react\";\n\nexport const Container = ({ fluid, children }) => (\n    <div className={`container${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n    </div>\n);","import React from \"react\";\n\nexport const Row = ({ fluid, children }) => (\n    <div className={`row${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n    </div>\n);","import React, { Component } from \"react\";\r\nimport { Navbar, FormGroup, FormControl, Button, Glyphicon } from \"react-bootstrap\";\r\nimport api from \"../../api\";\r\nimport { Container, Row, Col } from \"../Grid\";\r\nimport \"./body.css\";\r\n\r\n\r\nclass Body extends Component {\r\n\r\n\r\n    state = {\r\n        search: \"\",\r\n        results: []\r\n    };\r\n\r\n    searchMovie = query => {\r\n        api.search(query)\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({ results: res.data.Search });\r\n            })\r\n            .catch(err => alert('Something went wrong. Please check your title.'));\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            search: value\r\n        });\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.searchMovie(this.state.search);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar>\r\n                    <Navbar.Header>\r\n                        <Navbar.Brand>\r\n                            <a href=\"https://ilkovs.github.io\"><Glyphicon glyph=\"glyphicon glyphicon-film\" /> Omdb React App</a>\r\n                        </Navbar.Brand>\r\n                        <Navbar.Toggle />\r\n                    </Navbar.Header>\r\n                    <Navbar.Collapse>\r\n                        <Navbar.Form pullLeft>\r\n                            <FormGroup>\r\n                                <FormControl type=\"text\" placeholder=\"Pick a Movie\" onChange={this.handleInputChange} />\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" onClick={this.handleFormSubmit}>Search</Button>\r\n                        </Navbar.Form>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                <h1>Results</h1>\r\n                {this.state.results.map(movie => {\r\n                    return (\r\n                        <div>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col size=\"md-6 sm-12\">\r\n                                        <ul>\r\n                                            <li>\r\n                                                <h2>Title: {movie.Title}</h2>\r\n                                            </li>\r\n                                            <li>\r\n                                                <h2>Year: {movie.Year}</h2>\r\n                                            </li>\r\n                                            <li>\r\n                                                <h2>Type: {movie.Type}</h2>\r\n                                            </li>\r\n                                        </ul>\r\n                                    </Col >\r\n                                    <Col size=\"md-6 sm-12\">\r\n                                        <img alt=\"\" src={movie.Poster}></img>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                            </Container>\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from 'react';\nimport Body from \"./components/Body\"\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Body />\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}